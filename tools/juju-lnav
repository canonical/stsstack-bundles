#!/bin/bash

set -e -u

declare PUB_KEY=
declare -A MACHINES=()
declare -A CONTAINERS=()
declare -A UNITS=()

get_application_units() {
    local application=$1
    local -a units=()
    local i
    for i in "${!UNITS[@]}"; do
        if [[ ${i} =~ ^${application}/[0-9]+$ ]]; then
            units=( "${units[@]}" "${i}" )
        fi
    done
    echo "${units[@]}"
}

expand_unit() {
    local -a split_string
    local old_IFS=${IFS}
    IFS=":"
    read -r -a split_string <<<"$1"
    IFS=${old_IFS}
    local unit=${split_string[0]}
    local files=${split_string[1]}
    local ip_address
    local i
    if [[ ${unit} =~ ^[0-9]+[.][0-9]+[.][0-9]+[.][0-9]+$ ]] ; then
        ip_address=${unit}
    elif [[ ${unit} =~ ^[0-9]+$ ]]; then
        ip_address=${MACHINES[${unit}]}
    elif [[ ${unit} =~ lxd ]]; then
        ip_address=${CONTAINERS[${unit}]}
    elif [[ ${unit} =~ / ]]; then
        ip_address=${UNITS[${unit}]}
    else
        for i in $(get_application_units "${unit}"); do
            expand_unit "${i}:${files}"
        done
        return
    fi
    check_ssh_key "$unit" "$ip_address"
    lnav_arguments=( "${lnav_arguments[@]}" "root@${ip_address}:${files}" )
}

can_ssh_connect() {
    local ip_address="$1"
    ssh \
        -o ConnectTimeout=5 -o BatchMode=yes \
        -o StrictHostKeyChecking=no \
        "root@${ip_address}" true > /dev/null 2>&1
}

guess_ssh_key() {
    local ip_address="$1"
    local priv_key="$(ssh -G "root@${ip_address}" |awk '/identityfile/ { print $2; exit }')"
    echo "${priv_key/%.priv}.pub"
}

check_ssh_key() {
    local unit="$1"
    local ip_address="$2"
    echo "checking ssh key for ${ip_address}"
    if can_ssh_connect "$ip_address"; then
        return
    fi

    echo "Unable to ssh into root@${ip_address}." 1>&2

    # Guess a pub key using ssh -G if not supplied
    : "${PUB_KEY:=$(guess_pub_key "$ip_address")}"

    # 'Good Enough' tilde expansion
    PUB_KEY="${PUB_KEY/#\~/$HOME}"

    if [[ -n "$PUB_KEY" ]]; then
        copy_pub_key "$unit" "$ip_address"
    else
        cat << END
Please check that:
1.  Your public key is in the authorized_hosts file of the root user on ${ip_address}
    You can accomplish this by rerunning this script with the --pub-key flag:
    ./juju-lnav --pub-key ~/.ssh/id_rsa.pub UNIT:LOG

2.  A different key is not set for this host in ~/.ssh/config,
    e.g.

    HostName ${ip_address}
    IdentityFile ~/non_existent_key
END
        exit 1
    fi
}

copy_pub_key() {
    local unit="$1"
    local ip_address="$2"
    echo "copying ${PUB_KEY} to ${unit}'s authorized_keys"

    if ! [[ -f "${PUB_KEY}" ]]; then
        echo "${PUB_KEY} does not exist." 1>&2
        exit 1
    fi

    timeout 10 juju ssh -q "$unit" < "$PUB_KEY"\
        -- sudo tee --append /root/.ssh/authorized_keys >/dev/null


    if ! can_ssh_connect "$ip_address"; then
        echo "Still unable to connect to ${ip_address}"
        cat << END
Please check that a different key is not set for this host in ~/.ssh/config,
    e.g.

    HostName ${ip_address}
    IdentityFile ~/non_existent_key
END
        exit 1
    fi
}

get_machine_IPs() {
    local output
    local line
    readarray -t output < <(juju status --format json \
        | jq --raw-output '.machines | to_entries[]
            | "\( .key ) \( .value."ip-addresses"[0] )"')
    for line in "${output[@]}"; do
        local -a temp
        read -r -a temp <<<"${line}"
        MACHINES[${temp[0]}]=${temp[1]}
    done
}

get_container_IPs() {
    local output
    local line
    readarray -t output < <(juju status --format json \
        | jq --raw-output '.machines[] | select(.containers != null)
            | .containers | to_entries[]
            | "\( .key ) \( .value."ip-addresses"[0] )"')
    for line in "${output[@]}"; do
        local -a temp
        read -r -a temp <<<"${line}"
        CONTAINERS[${temp[0]}]=${temp[1]}
    done
}

get_unit_IPs() {
    local output
    local line
    readarray -t output < <(juju status --format=json \
        | jq --raw-output '.applications[] | select(.units != null)
            | .units | to_entries[]
            | "\( .key ) \( .value."public-address" )"')
    for line in "${output[@]}"; do
        local -a temp
        read -r -a temp <<<"${line}"
        UNITS[${temp[0]}]=${temp[1]}
    done
}

declare -a lnav_arguments=()
juju_info_loaded=0

if ! command -v lnav > /dev/null; then
    cat <<EOF
Please install lnav with

sudo snap install --edge lnav
sudo snap connect lnav:ssh-keys

And rerun this script.
EOF
    exit 1
fi

while (( $# > 0 )); do
    case $1 in
        -h|--help)
            cat <<EOF
Usage:

$(basename "$0") UNIT:LOGFILES [UNIT:LOGFILES [UNIT:LOGFILES [...]]]

Example:

./tools/juju-lnav octavia:/var/log/octavia/*.log{,1,2.gz}

Which loads logs from all Octavia units and the first two rotated logs. Note
that lnav can read regular log files as well as gzipped rotated log files.

Options:

UNIT        is the name of the unit
LOGFILES    is a regular shell GLOB

--pub-key PATH      Key to copy to supplied UNIT's authorized_keys file
                    if ssh authentication fails. Default: the first key
                    returned by 'ssh -G' for the given host.
EOF
            exit 0
            ;;
        --pub-key)
            PUB_KEY="$2"
            shift
            ;;
        *)
            if (( juju_info_loaded == 0 )); then
                get_machine_IPs
                get_container_IPs
                get_unit_IPs
                juju_info_loaded=1
            fi
            expand_unit "$1"
            ;;
    esac
    shift
done

echo "lnav ${lnav_arguments[*]}"
lnav "${lnav_arguments[@]}"
