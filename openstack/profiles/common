#!/bin/bash

. $(dirname $0)/../common/juju_helpers

function upload_image {
    src=$1
    image_name=$2
    image_file=$3
    image_format=${4:-"qcow2"}
    image_arch=${5:-"x86_64"}

    case "$src" in
        swift) http_root="${SWIFT_URI}/swift/v1/images";;
        cloudimages) http_root="http://cloud-images.ubuntu.com/${image_name}/current";;
    esac

    mkdir -vp ~/images

    [ -f ~/images/$image_file ] || {
        wget -O ~/images/$image_file ${http_root}/${image_file}
    }

    # Downloaded images are in qcow2 format already, so we
    # convert them to raw if specified format is not qcow2.
    if [ "$image_format" == "raw" ]; then
        dpkg -S qemu-img &>/dev/null || sudo apt install qemu-utils -y
        convert_image_to_raw $image_name $image_file
        image_name=$image_name-raw
        image_file=$image_name.img
    fi

    openstack image show $image_name || {
        openstack image create --public \
            --container-format=bare --disk-format=$image_format \
            --file=${HOME}/images/$image_file  $image_name \
            --property architecture=$image_arch
    }
}

function convert_image_to_raw {
    _image_name=$1-raw
    _image_file=$2

    [ -f ~/images/$_image_name.img ] || {
        previous_set_builtin=$-
        set +e
        qemu-img convert -f qcow2 -O raw ${HOME}/images/$_image_file ${HOME}/images/$_image_name.img
        exit_code=$?
        set -$previous_set_builtin
        if [ "$exit_code" != "0" ]; then
            echo "Failed to convert image, deleting file if exists"
            rm ${HOME}/images/$_image_name.img
            exit 1
        fi
    }

}

function install_packages {
    echo "NOTE: The configure script no longer sudo apt installs packages. If you find a client is missing on your machine, resolve it manually in advance of ./configure."
}

function create_roles {
    openstack role show Member || openstack role create Member
    openstack role show ResellerAdmin || openstack role create ResellerAdmin
}

function create_tempest_users {
    # Create demo/testing users, tenants and flavor
    create_roles
    openstack project show demo || {
        openstack project create demo
    }

    openstack user show demo || {
        openstack user create --project demo \
                              --password pass \
                              --enable \
                              --email demo@dev.null demo
    }
    openstack role add --user demo --project demo Member || :

    openstack project show alt_demo || {
        openstack project create alt_demo
    }
    openstack user show alt_demo || {
        openstack user create --project alt_demo \
                              --password secret \
                              --enable \
                              --email alt_demo@dev.null alt_demo
    }
    openstack role add --user alt_demo --project alt_demo Member || :
}

function create_tempest_users_v3 {
    # Create demo/testing users and projects
    create_roles
    openstack project show --domain admin_domain demo || {
        openstack project create --domain admin_domain demo
    }

    openstack user show --domain admin_domain demo || {
        openstack user create --project-domain admin_domain \
                              --project demo \
                              --password pass \
                              --enable --email demo@dev.null \
                              --domain admin_domain demo
    }
    openstack role add --user-domain admin_domain \
                       --user demo \
                       --project-domain admin_domain \
                       --project demo Member || :

    openstack project show --domain admin_domain alt_demo || {
        openstack project create --domain admin_domain alt_demo
    }

    openstack user show --domain admin_domain alt_demo || {
        openstack user create --project-domain admin_domain \
                              --project alt_demo \
                              --password secret \
                              --enable \
                              --email alt_demo@dev.null \
                              --domain admin_domain alt_demo
    }
    openstack role add --user-domain admin_domain \
                       --user alt_demo \
                       --project-domain admin_domain \
                       --project alt_demo Member || :
}

function create_tempest_flavors {
    openstack flavor show m1.cirros || openstack flavor create  --id 6 --ram 64  --disk 1 --vcpus 1 m1.cirros
    openstack flavor show m1.tempest || openstack flavor create --id 7 --ram 256 --disk 0 --vcpus 1 m1.tempest
    openstack flavor show m2.tempest || openstack flavor create --id 8 --ram 512 --disk 0 --vcpus 1 m2.tempest
}

function create_default_flavors {
    openstack flavor show m1.tiny || openstack flavor create   --id 1 --ram 512   --disk 1  --vcpus 1 m1.tiny
    openstack flavor show m1.small || openstack flavor create  --id 2 --ram 2048  --disk 20 --vcpus 1 m1.small
    openstack flavor show m1.medium || openstack flavor create --id 3 --ram 4096  --disk 20 --vcpus 2 m1.medium
    openstack flavor show m1.large || openstack flavor create  --id 4 --ram 8192  --disk 20 --vcpus 4 m1.large
    openstack flavor show m1.xlarge || openstack flavor create --id 5 --ram 16384 --disk 20 --vcpus 8 m1.xlarge
}

function is_ksv3 () {
    api_ver="$(juju config keystone preferred-api-version)"
    rel="$(juju config keystone openstack-origin| sed -r 's/.+-(.+)/\1/g')"
    rel="$(echo -e "$rel\nqueens"| sort| head -n 1)"
    series=$(juju status keystone --format=json| jq .machines[].series| tr -d '"')
    if [ "$api_ver" = "3" ] || [[ "${rel%%/*}" > "pike" ]] || \
        { [[ "$series" > "artful" ]] && [[ "$series" < "trusty" ]]; }; then
        return 0
    else
        return 1
    fi
}

function heat_setup() {
    juju $JUJU_RUN_CMD heat/leader domain-setup
}
