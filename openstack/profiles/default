#!/bin/bash -ex

. ./profiles/common

install_packages

# Set sts-stack overrides, if not already set.
[[ -z "$NAMESERVER" ]] && export NAMESERVER="10.230.64.2"
[[ -z "$SWIFT_IP" ]] && export SWIFT_IP="10.230.19.58"

# Set defaults, if not already set.
[[ -z "$GATEWAY" ]] && export GATEWAY="10.5.0.1"
[[ -z "$CIDR_EXT" ]] && export CIDR_EXT="10.5.0.0/16"
[[ -z "$FIP_RANGE" ]] && export FIP_RANGE="10.5.150.0:10.5.200.254"
[[ -z "$CIDR_PRIV" ]] && export CIDR_PRIV="192.168.21.0/24"
[[ -z "$UNDERCLOUD_EXT_NET" ]] && export UNDERCLOUD_EXT_NET="${OS_PROJECT_NAME}_admin_net"

NS_ARG=""
[ "`juju config neutron-api enable-ml2-dns`" = "true" ] && unset NAMESERVER || NS_ARG="-N $NAMESERVER"

ovn_units=`juju status ovn-chassis --format=json 2>/dev/null| jq '.machines| length'`
((ovn_units)) && ovn_enabled=true || ovn_enabled=false
if $ovn_enabled; then
    # ovn defaults to geneve
    net_type=${1:-"geneve"}
else
    net_type=${1:-""}
    [ -n "$net_type" ] || net_type="`juju config neutron-api default-tenant-network-type`"
    [ -n "$net_type" ] || net_type="`juju config neutron-api overlay-network-type|awk '{print $1}'`"
    [ -n "$net_type" ] || net_type="vxlan"
fi

dvr_enabled=`juju config neutron-api enable-dvr`
if [ "$dvr_enabled" = "true" ] || $ovn_enabled; then
    if ${BARE_METAL:-false}; then
        echo "INFO: set 'juju config neutron-openvswitch data-port=...'"
    else
        ./bin/add-data-ports.sh "" "$UNDERCLOUD_EXT_NET"
    fi
fi

# add extra port to overcloud neutron-gateway (if exists) and configure charm to use it
if ! ${BARE_METAL:-false} && ((`juju status neutron-gateway --format=json 2>/dev/null| jq '.machines| length'`)); then
    source ~/novarc
    ./bin/post-deploy-config neutron-gateway
fi

if ((`juju status ceilometer --format=json 2>/dev/null| jq '.machines| length'`)); then
    juju $JUJU_RUN_CMD ceilometer/leader ceilometer-upgrade
fi

if ((`juju status heat --format=json 2>/dev/null| jq '.machines| length'`)); then
    heat_setup
fi

# Configure neutron networking on overcloud
source novarc

if is_ksv3; then
  ./bin/neutron-ext-net-ksv3 --project admin --network-type flat -g $GATEWAY -c $CIDR_EXT -f $FIP_RANGE ext_net
  ./bin/neutron-tenant-net-ksv3 --project admin --network-type $net_type -r provider-router $NS_ARG private $CIDR_PRIV
  # Create demo/testing users, tenants and flavor
  create_tempest_users_v3
else
  ./bin/neutron-ext-net --network-type flat -g $GATEWAY -c $CIDR_EXT -f $FIP_RANGE ext_net
  ./bin/neutron-tenant-net --network-type $net_type -t admin -r provider-router $NS_ARG private $CIDR_PRIV
  # Create demo/testing users, tenants and flavor
  create_tempest_users
fi

set_img_properties ()
{
    img_name=$1
    img_version=$2
    img_file=$3

    ts=`stat ~/images/$img_file| sed -rn 's/Modify:\s+([[:digit:]-]+)\s+.+/\1/p'| tr -d '-'`
    declare -A props=( [architecture]=x86_64
                       [os_distro]='ubuntu'
                       [os_version]=$img_version
                       [version_name]="$ts"
                       [product_name]="com.ubuntu.cloud:server:${img_version}:amd64"
    )
    for p in ${!props[@]}; do 
      openstack image set --property $p=${props[$p]} $img_name &
    done
    wait
}

# Download images if not already present
mkdir -vp ~/images
upload_image cloudimages focal focal-server-cloudimg-amd64.img &
upload_image cloudimages jammy jammy-server-cloudimg-amd64.img &
upload_image cirros cirros-0.4.0 0.4.0/cirros-0.4.0-x86_64-disk.img &
wait
# Set properties needed by octavia-disk-image-retrofit (See LP: #1842430)
set_img_properties focal 20.04 focal-server-cloudimg-amd64.img &
set_img_properties jammy 22.04 jammy-server-cloudimg-amd64.img &
wait

# TODO: remove fallbacks once we move to queens (they are there for clients still on ocata)
image_id=$(openstack image list --name cirros -f value -c ID 2>/dev/null || openstack image list| awk '$4=="cirros" {print $2}')
image_alt_id=$(openstack image list --name cirros2 -f value -c ID 2>/dev/null || openstack image list| awk '$4=="cirros2" {print $2}')

echo "Flavors"
create_tempest_flavors
create_default_flavors
