#!/bin/bash
# Global variables are first defined in 00setup and module
# dependencies are defined in 01import-config-defaults
#
# All overlay/bundle variables (MOD_PARAMS) defaults must go into
# the <module>/module_defaults file.


# default for current stable is to use containerd
# See https://ubuntu.com/kubernetes/docs/container-runtime
if ! has_opt --docker; then
    set -- $@ --containerd && cache $@
fi

# default overlay setup
MOD_OVERLAYS+=(
    "etcd.yaml"
    "etcd-easyrsa.yaml"
    "easyrsa.yaml"
    "kubernetes/k8s-etcd.yaml"
)

add_mysql_overlay ()
{
    # NOTE: this is (should be) the same across all modules using mysql
    if has_min_series focal; then
        # There is no Focal support for percona-cluster
        MOD_PARAMS[__NUM_MYSQL_UNITS__]=3
        MOD_OVERLAYS+=( "mysql-innodb-cluster.yaml")
        # this will be auto-generated for each app (see common/render.d/all)
        MOD_OVERLAYS+=( "mysql-innodb-cluster-router.yaml" )
        MOD_PARAMS[__MYSQL_INTERFACE__]='__APPLICATION_MYSQL_INNODB_ROUTER__'
        # NOTE: 3 is the absolute minimum units required
        MOD_PARAMS[__NUM_MYSQL_UNITS__]=3
    else
        MOD_OVERLAYS+=( "mysql.yaml" )
    fi
}

using_kubeapi_lb ()
{
    ! has_opt --control-plane-ha* && ! has_opt --lb-octavia
}

if using_kubeapi_lb; then
    MOD_OVERLAYS+=( "kubernetes/k8s-lb.yaml"  )
fi
# default to flannel cni
if ! has_opt --calico && ! has_opt --canal; then
    MOD_OVERLAYS+=( "kubernetes/k8s-cni-flannel.yaml" )
fi
if ! has_opt --vault*; then
    MOD_OVERLAYS+=( "kubernetes/k8s-easyrsa.yaml" )
    if using_kubeapi_lb; then
        MOD_OVERLAYS+=( "kubernetes/k8s-lb-easyrsa.yaml" )
    fi
fi

# See https://bugs.launchpad.net/juju/+bug/1849636 for reason why we
# need min 2.7
if ! is_hyperconverged; then
    MOD_OVERLAYS+=( "kubernetes/k8s-openstack-integrator.yaml" )
    MOD_OVERLAYS+=( "kubernetes/k8s-openstack-cloud-controller.yaml" )
    if ! has_opt --no-trust && [[ ! "$JUJU_VERSION" < "2.7" ]]; then
        MOD_OVERLAYS+=( "kubernetes/k8s-openstack-integrator-trust.yaml" )
        JUJU_DEPLOY_OPTS=" --trust"
    fi
fi

# Automatically use proxy if in prodstack only
if $(timeout 1s getent hosts squid.internal &> /dev/null) && [ -z "${MOD_PARAMS[__CONTAINERD_PROXY__]}" ]; then
    MOD_MSGS[1_proxy.0]='PROXY: Hostname squid.internal resolves, setting containerd proxy to http://squid.internal:3128'
    MOD_PARAMS[__CONTAINERD_PROXY__]=http://squid.internal:3128
fi

# Skip processing input if it includes exclusive passthrough options
! has_excl_passthrough_opt && \
while (($# > 0))
do
    case "$1" in
        --k8s-channel)  #__OPT__type:<str>
            # which Kubernetes channel to set on deployment
            MOD_PARAMS[__K8S_CHANNEL__]="$2"
            shift
            ;;
        --ceph)
            conflicts_with $1 --rook-ceph
            MOD_OVERLAYS+=( "ceph/ceph.yaml" )
            MOD_OVERLAYS+=( "ceph/ceph-juju-storage.yaml" )
            MOD_OVERLAYS+=( "kubernetes/k8s-ceph.yaml" )
            MOD_OVERLAYS+=( "kubernetes/k8s-ceph-csi.yaml" )
            ;;
        --ceph-proxy)
            MOD_PARAMS[__CEPH_INTERFACE__]='ceph-proxy'
            MOD_OVERLAYS+=( "ceph/ceph-proxy.yaml" )
            MOD_MSGS[ceph-proxy.0]="once ceph is ready, do 'juju config admin-key=<key> fsid=<fsid> monitor-hosts=<mon-addr-list>'"
            MOD_MSGS[ceph-proxy.1]="e.g. juju config ceph-proxy admin-key=AQALEzleKLCNDBAAxrOY8WbxF2B7lDx0TaswGA== fsid=e5e6aee2-4719-11ea-8264-fa163e50d5d1 monitor-hosts='10.5.0.11:6789 10.5.0.12:6789 10.5.0.13:6789'"
            ;;
        --ceph-fs)
            if ! has_opt --ceph; then
                set -- $@ --ceph && cache $@
            fi
            MOD_OVERLAYS+=( "ceph/ceph-fs.yaml" )
            MOD_OVERLAYS+=( "ceph/ceph-fs-k8s.yaml" )
            MOD_OVERLAYS+=( "kubernetes/k8s-cephfs-csi.yaml" )
            ;;
        --ceph-fs-ha*)
            get_units $1 __NUM_CEPH_FS_UNITS__ 3
            MOD_OVERLAYS+=( "ceph/ceph-fs.yaml" )
            set -- $@ --ceph-fs && cache $@
            ;;
        --etcd-ha*)
            get_units $1 __NUM_ETCD_UNITS__ 3
            ;;
        --containerd)
            conflicts_with $1 --docker
            MOD_OVERLAYS+=( "kubernetes/k8s-containerd.yaml" )
            ;;
        --containerd-proxy)  #__OPT__type:<str> (default="" unless the hostname squid.internal resolves, then it's http://squid.internal:3128)
            MOD_PARAMS[__CONTAINERD_PROXY__]=$2
            shift
            ;;
        --containerd-no-proxy)  #__OPT__type:<str> (default=127.0.0.1,localhost,::1,10.149.0.0/16,10.0.0.0/8,172.16.0.0/12,192.168.0.0/16)
            MOD_PARAMS[__CONTAINERD_NO_PROXY__]=$2
            shift
            ;;
        --calico)
            conflicts_with $1 --canal
            MOD_OVERLAYS+=( "kubernetes/k8s-cni-calico.yaml" )
            ;;
        --canal)
            conflicts_with $1 --calico
            MOD_OVERLAYS+=( "kubernetes/k8s-cni-canal.yaml" )
            ;;
        --docker)
            conflicts_with $1 --containerd
            MOD_OVERLAYS+=( "kubernetes/k8s-docker.yaml" )
            MOD_PARAMS[__CONTAINER_RUNTIME__]='docker'
            ;;
        --docker-registry)
            MOD_OVERLAYS+=( "kubernetes/k8s-docker-registry.yaml" )
            if has_opt --vault*; then
                MOD_OVERLAYS+=( "kubernetes/k8s-vault-docker-registry.yaml" )
            else
                MOD_OVERLAYS+=( "kubernetes/k8s-easyrsa-docker-registry.yaml" )
            fi
            MOD_MSGS[docker-registry.0]="execute tools/configure_docker_registry.sh to upload the images and set image registry of the cluster to point to docker registry"
            ;;
        --e2e)
            MOD_OVERLAYS+=( "kubernetes/k8s-e2e.yaml" )
            if ! has_opt --vault*; then
                MOD_OVERLAYS+=( "kubernetes/k8s-e2e-easyrsa.yaml" )
            else
                MOD_OVERLAYS+=( "kubernetes/k8s-e2e-vault.yaml" )
            fi
            ;;
        --keystone)
            MOD_OVERLAYS+=( "openstack/keystone.yaml" )
            MOD_OVERLAYS+=( "kubernetes/k8s-keystone.yaml" )
            add_mysql_overlay
            ;;
        --keystone-ha*)
            get_units $1 __NUM_KEYSTONE_UNITS__ 3
            MOD_OVERLAYS+=( "openstack/keystone-ha.yaml" )
            set -- $@ --keystone && cache $@
            ;;
        --lb-ha-hacluster*|--lb-ha-keepalived*)
            conflicts_with $1 --lb-octavia
            if has_opt --control-plane-ha*; then
                echo "ERROR: you can't do --control-plane-ha and ${1%%:*} at the same time."
                exit 1
            fi
            get_units $1 __NUM_K8S_LB_UNITS__ 3
            if has_opt --lb-ha-keepalived*; then
                MOD_OVERLAYS+=( "kubernetes/k8s-lb-ha-keepalived.yaml" )
            else
                MOD_OVERLAYS+=( "kubernetes/k8s-lb-ha-hacluster.yaml" )
            fi
            ;;
        --lb-octavia)
            conflicts_with $1 '--lb-ha-hacluster*'
            conflicts_with $1 '--lb-ha-keepalived*'
            conflicts_with $1 '--control-plane-ha*'
            MOD_OVERLAYS+=( "kubernetes/k8s-octavia-lb.yaml" )
            ;;
        --control-plane-ha*)
            if has_opt --lb-ha*; then
                echo "ERROR: you can't do --lb-ha and --control-plane-ha at the same time."
                exit 1
            fi
            get_units $1 __NUM_K8S_CONTROL_PLANE_UNITS__ 3
            MOD_OVERLAYS+=( "kubernetes/k8s-control-plane-ha.yaml" )
            ;;
        --vault)
            MOD_OVERLAYS+=( "vault.yaml" )
            add_mysql_overlay
            MOD_OVERLAYS+=( "kubernetes/k8s-vault.yaml" )
            using_kubeapi_lb && MOD_OVERLAYS+=( "kubernetes/k8s-vault-lb.yaml" )
            has_opt --ceph && MOD_OVERLAYS+=( "ceph/vault-ceph.yaml" )
            ;;
        --etcd-channel)  #__OPT__type:<str>
            MOD_PARAMS[__ETCD_SNAP_CHANNEL__]=$2
            shift
            ;;
        --vault-ha*)
            get_units $1 __NUM_VAULT_UNITS__ 3
            MOD_OVERLAYS+=( "vault-ha.yaml" )
            MOD_OVERLAYS+=( "vault-etcd.yaml" )
            set -- $@ --vault && cache $@
            ;;
        --num-workers)  #__OPT__type:<int>
            MOD_PARAMS[__NUM_K8S_WORKER_UNITS__]=$2
            shift
            ;;
        --num-control-planes)  #__OPT__type:<int>
            MOD_PARAMS[__NUM_K8S_CONTROL_PLANE_UNITS__]=$2
            shift
            ;;
       --rook-ceph)
            conflicts_with $1 --ceph
            MOD_MSGS[rook.0]="once kubernetes cluster is ready, run tools/rook-ceph.sh to deploy Ceph via Rook"
            ;;
        --lma)
            MOD_OVERLAYS+=( "grafana.yaml ")
            MOD_OVERLAYS+=( "kubernetes/prometheus-k8s.yaml ")
            if has_opt --ceph; then
                MOD_OVERLAYS+=( "ceph/prometheus-ceph.yaml ")
            fi
            MOD_MSGS[grafana.0]="need to manually relate telegraf to any services you want to monitor"
            ;;
        --ssl)
            (cd ssl; . ./create_ca_cert.sh $MOD_SSL_STATE_DIR;)
            ssl_results="ssl/$MOD_SSL_STATE_DIR/results"
            MOD_PARAMS[__SSL_CA__]=`base64 ${ssl_results}/cacert.pem| tr -d '\n'`
            MOD_PARAMS[__SSL_CERT__]=`base64 ${ssl_results}/servercert.pem| tr -d '\n'`
            MOD_PARAMS[__SSL_KEY__]=`base64 ${ssl_results}/serverkey.pem| tr -d '\n'`
            MOD_OVERLAYS+=( "kubernetes/k8s-control-plane-keystone-ssl.yaml" )
            # Make everything HA with 1 unit (unless --ha has already been set)
            if ! has_opt '--keystone-ha[:0-9]*$'; then
                set -- $@ --keystone-ha:1 && cache $@
            fi
            ;;
        --multus)
	    MOD_MSGS[multus.0]="Run the following commands from k8s model to add multus"
	    MOD_MSGS[multus.1]="juju scp kubernetes-control-plane/0:config ~/.kube/config"
	    MOD_MSGS[multus.2]="juju add-k8s multus-k8s-cloud --controller $(juju switch | cut -d: -f1)"
	    MOD_MSGS[multus.3]="juju add-model multus-k8s-model multus-k8s-cloud"
	    MOD_MSGS[multus.4]="juju deploy cs:~containers/multus"
	    MOD_MSGS[multus.5]="To add network-attachment-definition, do 'juju config network-attachment-definitions=<>'"
	    ;;
        *)
            echo "ERROR: invalid input '$1'"
            _usage
            exit 1
            ;;
    esac
    shift
done

target=$series
[ -z "$pocket" ] || target=${target}-$pocket
target=${target}:${MOD_PARAMS[__K8S_CHANNEL__]}
MOD_PASSTHROUGH_OPTS+=( --release-name $target )

if has_opt --rook-ceph; then
    if [[ ${MOD_PARAMS[__NUM_K8S_WORKER_UNITS__]} -lt 3 ]]; then
        echo "INFO: auto-correcting kube-worker to 3 as --rook-ceph is being deployed."
        MOD_PARAMS[__NUM_K8S_WORKER_UNITS__]=3
    fi
fi

if ! has_opt --*-ha*; then
    if [ -r ~/novarc ]; then
        source ~/novarc
        for name in ${OS_PROJECT_NAME}_port_sec_enabled net_${OS_USERNAME}-pse; do
            if `openstack network show $name &>/dev/null`; then
                NET_NAME=$name
                break
            fi
        done
        echo "INFO: juju model will use network with port security enabled."
        MOD_PASSTHROUGH_OPTS+=( --model-config "network=${NET_NAME}" )
    else
        echo "WARNING: ~/novarc not found - unable to setup kubernetes network"
    fi
fi

