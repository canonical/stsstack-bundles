#!/bin/bash
#
# PLEASE AVOID PUTTING BUNDLE-SPECIFIC CODE IN HERE. INSTEAD USE THE INDIVIDUAL
# BUNDLE GENERATORS.
#
declare -A overlays_deduped=()
declare -a overlay_opts=()

# Catch any changes/additions to master opts
update_master_opts ${MOD_PASSTHROUGH_OPTS[@]}

type=$(get_cloud_type)
vip_start=${MASTER_OPTS[VIP_ADDR_START]}
if [[ -z $vip_start ]] && [[ -e ~/novarc ]] && [[ $type = openstack  ]]; then
    # prodstack
    cidr=$(source ~/novarc; openstack subnet show subnet_${OS_USERNAME}-psd \
                            -c cidr -f value 2>/dev/null)
    if [[ -z $cidr ]]; then
        # stsstack
        cidr=$(source ~/novarc; openstack subnet show \
                                ${OS_USERNAME}_admin_subnet \
                                -c cidr -f value 2>/dev/null)
        if [[ -n $cidr ]]; then
            vip_start=$(echo $cidr| sed -r 's/([0-9]+\.[0-9]+).+/\1/g').150.0
        fi
    else
        # Our primary network is /25 and we are arbitrarily using the
        # last 20 addresses for vips which is prone to collisions but
        # we have no alternative currently.
        net_end=$(awk -F'.' '/HostMax/{print $NF}' <<<$(ipcalc -b $cidr))
        vip_start=$(echo $cidr|
                    sed -r 's/([0-9]+\.[0-9]+\.[0-9]+).+/\1/g').$((net_end -
                    19))
    fi
fi
VIP_START_PREFIX=${vip_start%\.*}
VIP_START_SUFFIX=${vip_start##*\.}

if [ -z "$MOD_BASE_TEMPLATE" ]; then
    echo "ERROR: no template provided with --template"
    exit 1
elif [ -z "$MOD_DIR" ]; then
    echo "ERROR: no module name provided"
    exit 1
fi

if [ -n "${MASTER_OPTS[MODEL_CONFIG]}" ]; then
    juju model-config ${MASTER_OPTS[MODEL_CONFIG]}
fi

if [ -n "${MASTER_OPTS[MODEL_CONSTRAINTS]}" ]; then
    juju set-model-constraints ${MASTER_OPTS[MODEL_CONSTRAINTS]}
else
    juju set-model-constraints root-disk-source=volume root-disk=20G
fi

if has_opt --list; then
    state_root=`get_bundle_state_root`
    if [ -d "$state_root" ]; then
        echo -e "Existing bundles:\n./b (default)"
        find $state_root/* -maxdepth 0 -type d| egrep -v "/o$|resources"
        echo ""
    else
        echo "There are currently no bundles."
    fi
    exit
fi

bundles_dir=`get_bundle_state_dir`
mkdir -p $bundles_dir

finish ()
{
    local target

    echo "${MOD_DIR}/generate-bundle.sh ${CACHED_STDIN[@]}" > \
            ${bundles_dir}/generate-command
    if has_opt --replay; then
        target=${bundles_dir}/command
        echo -e "INFO: replaying last known command (from $target)\n"
        [ -e "$target" ] || { echo "ERROR: $target does not exist"; exit 1; }
    fi
    echo "Command to deploy:"
    cat ${bundles_dir}/command
    if has_opt --run; then
        . ${bundles_dir}/command
    fi
    has_opt --replay && exit 0 || true
}

# Replay ignores any input args and just prints the previously generated
# command.
has_opt --replay && finish

# Purge any existing overlays and parts
rm -rf $bundles_dir/o/*
rm -rf $bundles_dir/parts

# load renderers
RENDER_PARTS_DIR=$bundles_dir/parts
mkdir -p $RENDER_PARTS_DIR
. $MOD_DIR/common/render.d/all
. $MOD_DIR/common/render.d/resources
if ${MASTER_OPTS[HYPERCONVERGED_DEPLOYMENT]}; then
    if [[ -z ${MASTER_OPTS[DEFAULT_BINDING]:-""} ]]; then
        echo "ERROR: no default binding provided. Use --default-binding"
        exit 1
    fi
    PLACEMENT_OVERLAYS_DIR=$bundles_dir/p
    mkdir -p $PLACEMENT_OVERLAYS_DIR
    . $MOD_DIR/common/render.d/unit_placement
fi

# Make copy of base template, render, and store in named dir.
dtmp=`mktemp -d`
template_path=$dtmp/`basename $MOD_BASE_TEMPLATE`
bundle=${template_path%%.template}
cp $MOD_DIR/$MOD_BASE_TEMPLATE $bundle
render $bundle
mv $bundle $bundles_dir
if [ -r "$INTERNAL_BUNDLE_CONFIG" ]; then
    cp $INTERNAL_BUNDLE_CONFIG $bundles_dir/config
fi
rmdir $dtmp

# De-duplicate overlay list and create bundle structure.
declare -a overlay_list=()

if ((${#MOD_OVERLAYS[@]})); then
    mkdir -p $bundles_dir/o
    declare -a msgs=()
    for overlay in ${MOD_OVERLAYS[@]}; do
        [ "${overlays_deduped[$overlay]:-null}" = "null" ] || continue
        subdir=`dirname $overlay`
        if [[ $subdir != . ]]; then
            mkdir -p "$bundles_dir/o/$subdir"
        else
            unset subdir
        fi
        cp $MOD_DIR/overlays/$overlay $bundles_dir/o/${subdir:-""}
        if ((${#overlay_opts[@]}==0)); then
            overlay_opts+=("")  # left padding
        fi
        overlay_opts+=( --overlay $bundles_dir/o/$overlay )
        overlay_list+=( "$bundles_dir/o/$overlay" )
        render $bundles_dir/o/$overlay
        overlays_deduped[$overlay]=true
        msgs+=( " + $overlay\n" )
        # Copy overlay resources to bundles dir (if exists)
        resource_path=$MOD_DIR/resources/${overlay%%.*}
        if [ -d "$resource_path" ]; then
            mkdir -p $bundles_dir/resources
            cp -r $resource_path $bundles_dir/resources
            # add absolute path for resources
            render_resources_path $bundles_dir/o/$overlay
        fi
    done

    echo "Created ${MASTER_OPTS[TARGET_RELEASE_NAME]} bundle and overlays:"
    echo -e " ${msgs[@]}"
else
    echo -e "Created ${MASTER_OPTS[TARGET_RELEASE_NAME]} bundle\n"
fi

# put together any mysql interface parts that may have been generated as part
# of render()
aggregate_mysql_interface_parts $bundles_dir/o

# generate bundle list
base_bundle=$bundles_dir/`basename $bundle`
overlay_list+=( $base_bundle )
readarray -t \
    application_list < <("$MOD_DIR/../tools/juju-bundle-applications.py" \
    ${overlay_list[@]})

# Generate placement overlay for use with MAAS provider
if ${MASTER_OPTS[HYPERCONVERGED_DEPLOYMENT]}; then
    cp $MOD_DIR/overlays/unit_placement/header.yaml.template \
       $bundles_dir/unit-placement.yaml
    if [[ $MOD_NAME = openstack ]]; then
        # these two represent total machines since e.g. ceph is deployed on compute but compute and gateway are never colocated
        num_placement_machines=$((${MOD_PARAMS[__NUM_NEUTRON_GATEWAY_UNITS__]}+
                                    ${MOD_PARAMS[__NUM_COMPUTE_UNITS__]}))
    elif [[ $MOD_NAME = kubernetes ]]; then
        num_placement_machines=\
            $((${MOD_PARAMS[__NUM_K8S_CONTROL_PLANE_UNITS__]}+
                ${MOD_PARAMS[__NUM_K8S_WORKER_UNITS__]}))
    elif [[ $MOD_NAME = ceph ]]; then
        num_placement_machines=$((${MOD_PARAMS[__NUM_CEPH_OSD_UNITS__]}))
    else
        echo -n "ERROR: module '$MOD_NAME'" 1>&2
        echo " does not yet have support for hyperconverged mode" 1>&2
        exit 1
    fi
    # detect all apps used and generate placement info by doing:
    #  * search for all app names in generated bundles/overlays
    #  * search unit_placement template with same name
    for app in ${application_list[@]}; do
        # filter juju keywords
        [[ $app =~ ^(options|to|storage)$ ]] && continue
        app_placement=${app}.yaml
        t=$MOD_DIR/overlays/unit_placement/${app_placement}.template
        [ -r "$t" ] || continue
        # load template
        cp $t $PLACEMENT_OVERLAYS_DIR/$app_placement
        # apply all renderers
        render_placement_units_lxd $PLACEMENT_OVERLAYS_DIR/$app_placement \
                                   $num_placement_machines
        render_placement_units_metal $PLACEMENT_OVERLAYS_DIR/$app_placement \
                                     $num_placement_machines
        render $PLACEMENT_OVERLAYS_DIR/$app_placement
        # add to master placement overlay
        cat $PLACEMENT_OVERLAYS_DIR/$app_placement >> \
                $bundles_dir/unit-placement.yaml
    done
    # finally render master machine list
    render_placement_machines $bundles_dir/unit-placement.yaml \
                              $num_placement_machines
    render $bundles_dir/unit-placement.yaml
    # and add to list of overlays
    overlay_opts+=( --overlay $bundles_dir/unit-placement.yaml )

    # add default binding to all applications
    bindings="\    bindings:\n      '': ${MASTER_OPTS[DEFAULT_BINDING]}"
    find $bundles_dir -name \*.yaml|\
        xargs -l sed -i -r "/^\s+charm:.+/a$bindings"
fi

if ((${#overlay_opts[@]})); then
    overlay_opts+=("")  # right padding
fi

echo -e "juju deploy${JUJU_DEPLOY_OPTS} \
    ${base_bundle}${overlay_opts[@]:- }\n " > ${bundles_dir}/command
finish

for f in $INTERNAL_BUNDLE_CONFIG; do
    [ -n "$f" ] && [ -r "$f" ] && rm -f $f
done
